import * as readline from "readline";
import {parseProgram} from "./Parse";
import {transProgram} from "./Trans";
import {evalProgram} from "../vm/Eval";
import * as fs from "fs";
import logger, {removeConsoleOutput, addConsoleOutput } from "../Log";

const historyFile = ".repl_history";
const history: string[] = [];

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    history: history,
})

// Load history
function loadHistory() {
    if (fs.existsSync(historyFile)) {
        const file = fs.readFileSync(historyFile, 'utf-8').split('\n').reverse();
        file.forEach(cmd => {
            if (cmd) history.push(cmd);
        });
    } else {
        fs.openSync(historyFile, 'w');
    }
}

function exit() {
    console.log("Goodbye!");
    rl.close();
    process.exit(0);
}

function toggleVerbose(oldVerbose: boolean): boolean {
    const newVerbose = !oldVerbose;
    if (newVerbose) {
        addConsoleOutput();
    } else {
        removeConsoleOutput();
    }
    console.log(`Verbose mode is ${!oldVerbose ? "on" : "off"}`);
    return !oldVerbose;
}

export function runRepl(verbose = false) {
    loadHistory();

    rl.question("> ", (input) => {
        switch (input) {
            case "exit":
                exit();
                break;
            case "verbose": {
                const newVerbose = toggleVerbose(verbose);
                runRepl(newVerbose);
            }
                break;
            default:
                try {
                    fs.appendFileSync(historyFile, input + '\n');
                    // Get the parsed tree generated by ANTLR
                    const parsedTree = parseProgram(input, verbose);
                    // Translate the parsed tree into our own AST
                    const ourTree = transProgram(parsedTree, verbose);
                    // Evaluate the translated AST
                    const result = evalProgram(ourTree);
                    // for REPL, we always show the result
                    result.show();
                } catch (err) {
                    console.error("REPL: ", err);
                }
                runRepl(verbose);
        }
    });
}
